/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as FlightsIndexImport } from './routes/flights/index'
import { Route as PilotTs3Import } from './routes/pilot/ts3'
import { Route as PilotStartToFlyImport } from './routes/pilot/start-to-fly'
import { Route as PilotPilotSoftwaresImport } from './routes/pilot/pilot-softwares'
import { Route as PilotIntroductionToFlyImport } from './routes/pilot/introduction-to-fly'
import { Route as FlightsCallsignImport } from './routes/flights/$callsign'
import { Route as DocsSplatImport } from './routes/docs/$'
import { Route as DivisionStaffImport } from './routes/division/staff'
import { Route as DivisionPrivacyImport } from './routes/division/privacy'
import { Route as DivisionIntroductionImport } from './routes/division/introduction'
import { Route as DivisionApiImport } from './routes/division/api'
import { Route as ControllerVisitingAndTransferringImport } from './routes/controller/visiting-and-transferring'
import { Route as ControllerSectorImport } from './routes/controller/sector'
import { Route as ControllerLoaImport } from './routes/controller/loa'
import { Route as ControllerControllerRegulationsImport } from './routes/controller/controller-regulations'
import { Route as ControllerControllerListImport } from './routes/controller/controller-list'
import { Route as ControllerBecomeAControllerImport } from './routes/controller/become-a-controller'
import { Route as AirspaceVfrImport } from './routes/airspace/vfr'
import { Route as AirspaceStationImport } from './routes/airspace/station'
import { Route as AirspaceSopImport } from './routes/airspace/sop'
import { Route as AirspaceRvsmImport } from './routes/airspace/rvsm'
import { Route as AirspaceFirImport } from './routes/airspace/fir'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FlightsIndexRoute = FlightsIndexImport.update({
  id: '/flights/',
  path: '/flights/',
  getParentRoute: () => rootRoute,
} as any)

const PilotTs3Route = PilotTs3Import.update({
  id: '/pilot/ts3',
  path: '/pilot/ts3',
  getParentRoute: () => rootRoute,
} as any)

const PilotStartToFlyRoute = PilotStartToFlyImport.update({
  id: '/pilot/start-to-fly',
  path: '/pilot/start-to-fly',
  getParentRoute: () => rootRoute,
} as any)

const PilotPilotSoftwaresRoute = PilotPilotSoftwaresImport.update({
  id: '/pilot/pilot-softwares',
  path: '/pilot/pilot-softwares',
  getParentRoute: () => rootRoute,
} as any)

const PilotIntroductionToFlyRoute = PilotIntroductionToFlyImport.update({
  id: '/pilot/introduction-to-fly',
  path: '/pilot/introduction-to-fly',
  getParentRoute: () => rootRoute,
} as any)

const FlightsCallsignRoute = FlightsCallsignImport.update({
  id: '/flights/$callsign',
  path: '/flights/$callsign',
  getParentRoute: () => rootRoute,
} as any)

const DocsSplatRoute = DocsSplatImport.update({
  id: '/docs/$',
  path: '/docs/$',
  getParentRoute: () => rootRoute,
} as any)

const DivisionStaffRoute = DivisionStaffImport.update({
  id: '/division/staff',
  path: '/division/staff',
  getParentRoute: () => rootRoute,
} as any)

const DivisionPrivacyRoute = DivisionPrivacyImport.update({
  id: '/division/privacy',
  path: '/division/privacy',
  getParentRoute: () => rootRoute,
} as any)

const DivisionIntroductionRoute = DivisionIntroductionImport.update({
  id: '/division/introduction',
  path: '/division/introduction',
  getParentRoute: () => rootRoute,
} as any)

const DivisionApiRoute = DivisionApiImport.update({
  id: '/division/api',
  path: '/division/api',
  getParentRoute: () => rootRoute,
} as any)

const ControllerVisitingAndTransferringRoute =
  ControllerVisitingAndTransferringImport.update({
    id: '/controller/visiting-and-transferring',
    path: '/controller/visiting-and-transferring',
    getParentRoute: () => rootRoute,
  } as any)

const ControllerSectorRoute = ControllerSectorImport.update({
  id: '/controller/sector',
  path: '/controller/sector',
  getParentRoute: () => rootRoute,
} as any)

const ControllerLoaRoute = ControllerLoaImport.update({
  id: '/controller/loa',
  path: '/controller/loa',
  getParentRoute: () => rootRoute,
} as any)

const ControllerControllerRegulationsRoute =
  ControllerControllerRegulationsImport.update({
    id: '/controller/controller-regulations',
    path: '/controller/controller-regulations',
    getParentRoute: () => rootRoute,
  } as any)

const ControllerControllerListRoute = ControllerControllerListImport.update({
  id: '/controller/controller-list',
  path: '/controller/controller-list',
  getParentRoute: () => rootRoute,
} as any)

const ControllerBecomeAControllerRoute =
  ControllerBecomeAControllerImport.update({
    id: '/controller/become-a-controller',
    path: '/controller/become-a-controller',
    getParentRoute: () => rootRoute,
  } as any)

const AirspaceVfrRoute = AirspaceVfrImport.update({
  id: '/airspace/vfr',
  path: '/airspace/vfr',
  getParentRoute: () => rootRoute,
} as any)

const AirspaceStationRoute = AirspaceStationImport.update({
  id: '/airspace/station',
  path: '/airspace/station',
  getParentRoute: () => rootRoute,
} as any)

const AirspaceSopRoute = AirspaceSopImport.update({
  id: '/airspace/sop',
  path: '/airspace/sop',
  getParentRoute: () => rootRoute,
} as any)

const AirspaceRvsmRoute = AirspaceRvsmImport.update({
  id: '/airspace/rvsm',
  path: '/airspace/rvsm',
  getParentRoute: () => rootRoute,
} as any)

const AirspaceFirRoute = AirspaceFirImport.update({
  id: '/airspace/fir',
  path: '/airspace/fir',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/airspace/fir': {
      id: '/airspace/fir'
      path: '/airspace/fir'
      fullPath: '/airspace/fir'
      preLoaderRoute: typeof AirspaceFirImport
      parentRoute: typeof rootRoute
    }
    '/airspace/rvsm': {
      id: '/airspace/rvsm'
      path: '/airspace/rvsm'
      fullPath: '/airspace/rvsm'
      preLoaderRoute: typeof AirspaceRvsmImport
      parentRoute: typeof rootRoute
    }
    '/airspace/sop': {
      id: '/airspace/sop'
      path: '/airspace/sop'
      fullPath: '/airspace/sop'
      preLoaderRoute: typeof AirspaceSopImport
      parentRoute: typeof rootRoute
    }
    '/airspace/station': {
      id: '/airspace/station'
      path: '/airspace/station'
      fullPath: '/airspace/station'
      preLoaderRoute: typeof AirspaceStationImport
      parentRoute: typeof rootRoute
    }
    '/airspace/vfr': {
      id: '/airspace/vfr'
      path: '/airspace/vfr'
      fullPath: '/airspace/vfr'
      preLoaderRoute: typeof AirspaceVfrImport
      parentRoute: typeof rootRoute
    }
    '/controller/become-a-controller': {
      id: '/controller/become-a-controller'
      path: '/controller/become-a-controller'
      fullPath: '/controller/become-a-controller'
      preLoaderRoute: typeof ControllerBecomeAControllerImport
      parentRoute: typeof rootRoute
    }
    '/controller/controller-list': {
      id: '/controller/controller-list'
      path: '/controller/controller-list'
      fullPath: '/controller/controller-list'
      preLoaderRoute: typeof ControllerControllerListImport
      parentRoute: typeof rootRoute
    }
    '/controller/controller-regulations': {
      id: '/controller/controller-regulations'
      path: '/controller/controller-regulations'
      fullPath: '/controller/controller-regulations'
      preLoaderRoute: typeof ControllerControllerRegulationsImport
      parentRoute: typeof rootRoute
    }
    '/controller/loa': {
      id: '/controller/loa'
      path: '/controller/loa'
      fullPath: '/controller/loa'
      preLoaderRoute: typeof ControllerLoaImport
      parentRoute: typeof rootRoute
    }
    '/controller/sector': {
      id: '/controller/sector'
      path: '/controller/sector'
      fullPath: '/controller/sector'
      preLoaderRoute: typeof ControllerSectorImport
      parentRoute: typeof rootRoute
    }
    '/controller/visiting-and-transferring': {
      id: '/controller/visiting-and-transferring'
      path: '/controller/visiting-and-transferring'
      fullPath: '/controller/visiting-and-transferring'
      preLoaderRoute: typeof ControllerVisitingAndTransferringImport
      parentRoute: typeof rootRoute
    }
    '/division/api': {
      id: '/division/api'
      path: '/division/api'
      fullPath: '/division/api'
      preLoaderRoute: typeof DivisionApiImport
      parentRoute: typeof rootRoute
    }
    '/division/introduction': {
      id: '/division/introduction'
      path: '/division/introduction'
      fullPath: '/division/introduction'
      preLoaderRoute: typeof DivisionIntroductionImport
      parentRoute: typeof rootRoute
    }
    '/division/privacy': {
      id: '/division/privacy'
      path: '/division/privacy'
      fullPath: '/division/privacy'
      preLoaderRoute: typeof DivisionPrivacyImport
      parentRoute: typeof rootRoute
    }
    '/division/staff': {
      id: '/division/staff'
      path: '/division/staff'
      fullPath: '/division/staff'
      preLoaderRoute: typeof DivisionStaffImport
      parentRoute: typeof rootRoute
    }
    '/docs/$': {
      id: '/docs/$'
      path: '/docs/$'
      fullPath: '/docs/$'
      preLoaderRoute: typeof DocsSplatImport
      parentRoute: typeof rootRoute
    }
    '/flights/$callsign': {
      id: '/flights/$callsign'
      path: '/flights/$callsign'
      fullPath: '/flights/$callsign'
      preLoaderRoute: typeof FlightsCallsignImport
      parentRoute: typeof rootRoute
    }
    '/pilot/introduction-to-fly': {
      id: '/pilot/introduction-to-fly'
      path: '/pilot/introduction-to-fly'
      fullPath: '/pilot/introduction-to-fly'
      preLoaderRoute: typeof PilotIntroductionToFlyImport
      parentRoute: typeof rootRoute
    }
    '/pilot/pilot-softwares': {
      id: '/pilot/pilot-softwares'
      path: '/pilot/pilot-softwares'
      fullPath: '/pilot/pilot-softwares'
      preLoaderRoute: typeof PilotPilotSoftwaresImport
      parentRoute: typeof rootRoute
    }
    '/pilot/start-to-fly': {
      id: '/pilot/start-to-fly'
      path: '/pilot/start-to-fly'
      fullPath: '/pilot/start-to-fly'
      preLoaderRoute: typeof PilotStartToFlyImport
      parentRoute: typeof rootRoute
    }
    '/pilot/ts3': {
      id: '/pilot/ts3'
      path: '/pilot/ts3'
      fullPath: '/pilot/ts3'
      preLoaderRoute: typeof PilotTs3Import
      parentRoute: typeof rootRoute
    }
    '/flights/': {
      id: '/flights/'
      path: '/flights'
      fullPath: '/flights'
      preLoaderRoute: typeof FlightsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/airspace/fir': typeof AirspaceFirRoute
  '/airspace/rvsm': typeof AirspaceRvsmRoute
  '/airspace/sop': typeof AirspaceSopRoute
  '/airspace/station': typeof AirspaceStationRoute
  '/airspace/vfr': typeof AirspaceVfrRoute
  '/controller/become-a-controller': typeof ControllerBecomeAControllerRoute
  '/controller/controller-list': typeof ControllerControllerListRoute
  '/controller/controller-regulations': typeof ControllerControllerRegulationsRoute
  '/controller/loa': typeof ControllerLoaRoute
  '/controller/sector': typeof ControllerSectorRoute
  '/controller/visiting-and-transferring': typeof ControllerVisitingAndTransferringRoute
  '/division/api': typeof DivisionApiRoute
  '/division/introduction': typeof DivisionIntroductionRoute
  '/division/privacy': typeof DivisionPrivacyRoute
  '/division/staff': typeof DivisionStaffRoute
  '/docs/$': typeof DocsSplatRoute
  '/flights/$callsign': typeof FlightsCallsignRoute
  '/pilot/introduction-to-fly': typeof PilotIntroductionToFlyRoute
  '/pilot/pilot-softwares': typeof PilotPilotSoftwaresRoute
  '/pilot/start-to-fly': typeof PilotStartToFlyRoute
  '/pilot/ts3': typeof PilotTs3Route
  '/flights': typeof FlightsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/airspace/fir': typeof AirspaceFirRoute
  '/airspace/rvsm': typeof AirspaceRvsmRoute
  '/airspace/sop': typeof AirspaceSopRoute
  '/airspace/station': typeof AirspaceStationRoute
  '/airspace/vfr': typeof AirspaceVfrRoute
  '/controller/become-a-controller': typeof ControllerBecomeAControllerRoute
  '/controller/controller-list': typeof ControllerControllerListRoute
  '/controller/controller-regulations': typeof ControllerControllerRegulationsRoute
  '/controller/loa': typeof ControllerLoaRoute
  '/controller/sector': typeof ControllerSectorRoute
  '/controller/visiting-and-transferring': typeof ControllerVisitingAndTransferringRoute
  '/division/api': typeof DivisionApiRoute
  '/division/introduction': typeof DivisionIntroductionRoute
  '/division/privacy': typeof DivisionPrivacyRoute
  '/division/staff': typeof DivisionStaffRoute
  '/docs/$': typeof DocsSplatRoute
  '/flights/$callsign': typeof FlightsCallsignRoute
  '/pilot/introduction-to-fly': typeof PilotIntroductionToFlyRoute
  '/pilot/pilot-softwares': typeof PilotPilotSoftwaresRoute
  '/pilot/start-to-fly': typeof PilotStartToFlyRoute
  '/pilot/ts3': typeof PilotTs3Route
  '/flights': typeof FlightsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/airspace/fir': typeof AirspaceFirRoute
  '/airspace/rvsm': typeof AirspaceRvsmRoute
  '/airspace/sop': typeof AirspaceSopRoute
  '/airspace/station': typeof AirspaceStationRoute
  '/airspace/vfr': typeof AirspaceVfrRoute
  '/controller/become-a-controller': typeof ControllerBecomeAControllerRoute
  '/controller/controller-list': typeof ControllerControllerListRoute
  '/controller/controller-regulations': typeof ControllerControllerRegulationsRoute
  '/controller/loa': typeof ControllerLoaRoute
  '/controller/sector': typeof ControllerSectorRoute
  '/controller/visiting-and-transferring': typeof ControllerVisitingAndTransferringRoute
  '/division/api': typeof DivisionApiRoute
  '/division/introduction': typeof DivisionIntroductionRoute
  '/division/privacy': typeof DivisionPrivacyRoute
  '/division/staff': typeof DivisionStaffRoute
  '/docs/$': typeof DocsSplatRoute
  '/flights/$callsign': typeof FlightsCallsignRoute
  '/pilot/introduction-to-fly': typeof PilotIntroductionToFlyRoute
  '/pilot/pilot-softwares': typeof PilotPilotSoftwaresRoute
  '/pilot/start-to-fly': typeof PilotStartToFlyRoute
  '/pilot/ts3': typeof PilotTs3Route
  '/flights/': typeof FlightsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/airspace/fir'
    | '/airspace/rvsm'
    | '/airspace/sop'
    | '/airspace/station'
    | '/airspace/vfr'
    | '/controller/become-a-controller'
    | '/controller/controller-list'
    | '/controller/controller-regulations'
    | '/controller/loa'
    | '/controller/sector'
    | '/controller/visiting-and-transferring'
    | '/division/api'
    | '/division/introduction'
    | '/division/privacy'
    | '/division/staff'
    | '/docs/$'
    | '/flights/$callsign'
    | '/pilot/introduction-to-fly'
    | '/pilot/pilot-softwares'
    | '/pilot/start-to-fly'
    | '/pilot/ts3'
    | '/flights'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/airspace/fir'
    | '/airspace/rvsm'
    | '/airspace/sop'
    | '/airspace/station'
    | '/airspace/vfr'
    | '/controller/become-a-controller'
    | '/controller/controller-list'
    | '/controller/controller-regulations'
    | '/controller/loa'
    | '/controller/sector'
    | '/controller/visiting-and-transferring'
    | '/division/api'
    | '/division/introduction'
    | '/division/privacy'
    | '/division/staff'
    | '/docs/$'
    | '/flights/$callsign'
    | '/pilot/introduction-to-fly'
    | '/pilot/pilot-softwares'
    | '/pilot/start-to-fly'
    | '/pilot/ts3'
    | '/flights'
  id:
    | '__root__'
    | '/'
    | '/airspace/fir'
    | '/airspace/rvsm'
    | '/airspace/sop'
    | '/airspace/station'
    | '/airspace/vfr'
    | '/controller/become-a-controller'
    | '/controller/controller-list'
    | '/controller/controller-regulations'
    | '/controller/loa'
    | '/controller/sector'
    | '/controller/visiting-and-transferring'
    | '/division/api'
    | '/division/introduction'
    | '/division/privacy'
    | '/division/staff'
    | '/docs/$'
    | '/flights/$callsign'
    | '/pilot/introduction-to-fly'
    | '/pilot/pilot-softwares'
    | '/pilot/start-to-fly'
    | '/pilot/ts3'
    | '/flights/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AirspaceFirRoute: typeof AirspaceFirRoute
  AirspaceRvsmRoute: typeof AirspaceRvsmRoute
  AirspaceSopRoute: typeof AirspaceSopRoute
  AirspaceStationRoute: typeof AirspaceStationRoute
  AirspaceVfrRoute: typeof AirspaceVfrRoute
  ControllerBecomeAControllerRoute: typeof ControllerBecomeAControllerRoute
  ControllerControllerListRoute: typeof ControllerControllerListRoute
  ControllerControllerRegulationsRoute: typeof ControllerControllerRegulationsRoute
  ControllerLoaRoute: typeof ControllerLoaRoute
  ControllerSectorRoute: typeof ControllerSectorRoute
  ControllerVisitingAndTransferringRoute: typeof ControllerVisitingAndTransferringRoute
  DivisionApiRoute: typeof DivisionApiRoute
  DivisionIntroductionRoute: typeof DivisionIntroductionRoute
  DivisionPrivacyRoute: typeof DivisionPrivacyRoute
  DivisionStaffRoute: typeof DivisionStaffRoute
  DocsSplatRoute: typeof DocsSplatRoute
  FlightsCallsignRoute: typeof FlightsCallsignRoute
  PilotIntroductionToFlyRoute: typeof PilotIntroductionToFlyRoute
  PilotPilotSoftwaresRoute: typeof PilotPilotSoftwaresRoute
  PilotStartToFlyRoute: typeof PilotStartToFlyRoute
  PilotTs3Route: typeof PilotTs3Route
  FlightsIndexRoute: typeof FlightsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AirspaceFirRoute: AirspaceFirRoute,
  AirspaceRvsmRoute: AirspaceRvsmRoute,
  AirspaceSopRoute: AirspaceSopRoute,
  AirspaceStationRoute: AirspaceStationRoute,
  AirspaceVfrRoute: AirspaceVfrRoute,
  ControllerBecomeAControllerRoute: ControllerBecomeAControllerRoute,
  ControllerControllerListRoute: ControllerControllerListRoute,
  ControllerControllerRegulationsRoute: ControllerControllerRegulationsRoute,
  ControllerLoaRoute: ControllerLoaRoute,
  ControllerSectorRoute: ControllerSectorRoute,
  ControllerVisitingAndTransferringRoute:
    ControllerVisitingAndTransferringRoute,
  DivisionApiRoute: DivisionApiRoute,
  DivisionIntroductionRoute: DivisionIntroductionRoute,
  DivisionPrivacyRoute: DivisionPrivacyRoute,
  DivisionStaffRoute: DivisionStaffRoute,
  DocsSplatRoute: DocsSplatRoute,
  FlightsCallsignRoute: FlightsCallsignRoute,
  PilotIntroductionToFlyRoute: PilotIntroductionToFlyRoute,
  PilotPilotSoftwaresRoute: PilotPilotSoftwaresRoute,
  PilotStartToFlyRoute: PilotStartToFlyRoute,
  PilotTs3Route: PilotTs3Route,
  FlightsIndexRoute: FlightsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/airspace/fir",
        "/airspace/rvsm",
        "/airspace/sop",
        "/airspace/station",
        "/airspace/vfr",
        "/controller/become-a-controller",
        "/controller/controller-list",
        "/controller/controller-regulations",
        "/controller/loa",
        "/controller/sector",
        "/controller/visiting-and-transferring",
        "/division/api",
        "/division/introduction",
        "/division/privacy",
        "/division/staff",
        "/docs/$",
        "/flights/$callsign",
        "/pilot/introduction-to-fly",
        "/pilot/pilot-softwares",
        "/pilot/start-to-fly",
        "/pilot/ts3",
        "/flights/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/airspace/fir": {
      "filePath": "airspace/fir.tsx"
    },
    "/airspace/rvsm": {
      "filePath": "airspace/rvsm.tsx"
    },
    "/airspace/sop": {
      "filePath": "airspace/sop.tsx"
    },
    "/airspace/station": {
      "filePath": "airspace/station.tsx"
    },
    "/airspace/vfr": {
      "filePath": "airspace/vfr.tsx"
    },
    "/controller/become-a-controller": {
      "filePath": "controller/become-a-controller.tsx"
    },
    "/controller/controller-list": {
      "filePath": "controller/controller-list.tsx"
    },
    "/controller/controller-regulations": {
      "filePath": "controller/controller-regulations.tsx"
    },
    "/controller/loa": {
      "filePath": "controller/loa.tsx"
    },
    "/controller/sector": {
      "filePath": "controller/sector.tsx"
    },
    "/controller/visiting-and-transferring": {
      "filePath": "controller/visiting-and-transferring.tsx"
    },
    "/division/api": {
      "filePath": "division/api.tsx"
    },
    "/division/introduction": {
      "filePath": "division/introduction.tsx"
    },
    "/division/privacy": {
      "filePath": "division/privacy.tsx"
    },
    "/division/staff": {
      "filePath": "division/staff.tsx"
    },
    "/docs/$": {
      "filePath": "docs/$.tsx"
    },
    "/flights/$callsign": {
      "filePath": "flights/$callsign.tsx"
    },
    "/pilot/introduction-to-fly": {
      "filePath": "pilot/introduction-to-fly.tsx"
    },
    "/pilot/pilot-softwares": {
      "filePath": "pilot/pilot-softwares.tsx"
    },
    "/pilot/start-to-fly": {
      "filePath": "pilot/start-to-fly.tsx"
    },
    "/pilot/ts3": {
      "filePath": "pilot/ts3.tsx"
    },
    "/flights/": {
      "filePath": "flights/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
